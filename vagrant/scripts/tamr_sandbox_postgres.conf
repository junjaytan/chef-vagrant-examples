# This conservatively assumes a 2GB VM instance with 1 core for the sandbox
## Tamr customizations to the stock postgres config file modified for sandbox specs
## This file is included in the postgres.conf file and should
## live in the same directory.

## -----------------------------------------------------------------------------
## Resource Management
## http://www.postgresql.org/docs/9.3/static/runtime-config-resource.html

## This should be set to 40% of the available memory on a machine that's dedicated
## to Tamr. Set it to 25% if this is on your machine and you'll also be doing non
## tamr things.
## On really old machines, you might also have to change kernel.shmmax etc
## in /etc/sysctl.conf
shared_buffers = 1GB

## 32MB per 1 GB of ram available.
## is per operator node in query, so do not set this to a really high value;
## the db will crash on complex plans with many nodes.
## Also, do not set this to a high value if you'll have multiple schemas of tamr
## on the same machine.
work_mem = 96MB

## used for vacuum etc. Large values don't help much. Don't go beyond 256 MB
maintenance_work_mem = 128MB

## Used by Planner to estimate how much data might be in the cache. A conservative
## setting is 50% of the total memory. Could go up to 75% on dedicated machines.
effective_cache_size = 1GB

## For write-heavy systems (aka Tamr), setting this to 256 is a good idea.
## Large values mean longer recovery if the database crashes.
checkpoint_segments = 32
checkpoint_completion_target = 0.9

## -----------------------------------------------------------------------------
## Logging
## http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html

# Capture stderr messages and write them to disk
# logs are written to "log_directory" with file name that looks like
# the pattern in "log_filename"
logging_collector = true

# Log all queries that take a while. (unit = ms)
log_min_duration_statement = 1000

# Log duration of all queries? (lots of spam)
#log_duration = true

# Log locks that take longer than "deadlock_timeout" (default 1s) to acquire
log_lock_waits = true

# Log prefix: <timestamp millis> <sessionID> txn <txnId>
log_line_prefix = '%m %c txn #%x\t'

# logs checkpoints and restartpoints. Useful in debugging perf problems
log_checkpoints = true

# Log auto vacuums that take a while (unit = ms)
log_autovacuum_min_duration = 1000

# Log large temporary files (created when we sort, hash or materialize) (unit = kb)
log_temp_files = 102400

## Also print out plans for queries that take a long time
## http://www.postgresql.org/docs/9.3/static/auto-explain.html
## And collect runtime statistics for all the queries that were executed
## http://www.postgresql.org/docs/9.3/static/pgstatstatements.html
#shared_preload_libraries = 'auto_explain,pg_stat_statements'
#auto_explain.log_min_duration = '10s'
pg_stat_statements.max = 10000
pg_stat_statements.track = all
